[{"content":"Over the weekend, I solo participated in the 48-hour ECTF. I ranked 53rd out of 383 teams. Massive thanks to the Cyber \u0026amp; Chill team for hosting this CTF.\nCryptography\rASCII me anything but the flag\rDescription: There is an encrypted flag, good luck with that I encrypted it well!\n108 100 111 109 123 85 99 49 122 95 106 53 95 79 111 51 95 88 52 116 95 48 109 95 51 111 88 121 90 107 97 106 48 105 125 10 10 69 98 111 98 32 102 112 32 118 108 114 111 32 104 98 118 44 32 100 108 108 97 32 105 114 122 104 32 58 32 72 66 86 72 66 86 10 10 87 101 108 108 32 100 111 110 101 44 32 98 117 116 32 110 111 119 32 100 111 32 121 111 117 32 107 110 111 119 32 97 98 111 117 116 32 116 104 101 32 103 117 121 32 119 104 111 32 103 111 116 32 115 116 97 98 98 101 100 32 50 51 32 116 105 109 101 115 32 63\nAuthor: Antoine\nLooking at the range of numbers, my first guess was to convert them to ASCII.\nI guessed correct. From the conversion, the first two lines are still encrypted somehow but the last line hints towards what the next step is. Julius Caesar was stabbed 23 times so the next step must be to use the Caesar cipher.\nPutting the second line (Ebob fp vlro hbv, dlla irzh : HBVHBV) into Cyberchef with a variation of the Caesar Cipher (ROT47) to decipher the text gives the result:\nNow we have a key: KEYKEY. Using Cyberchef again, and the first line from the ASCII conversion (ldom{Uc1z_j5_Oo3_X4t_0m_3oXyZkaj0i}) we can use Vigenère decipher to get the flag:\nFlag: ectf{Th1s_i5_Th3_W4y_0f_3nCrYpti0n}\nCracking the Vault\rDescription: The vault is locked with a key, but we\u0026rsquo;ve managed to access a security computer. Unfortunately, the key is encrypted, and the owner forgot to remove the file that encrypts it. It appears to be some sort of homemade encryption, but don’t worry this should be a piece of cake for you, right?\nAuthor: Antoine\nFor this challenge, there are two files. A python file which has an encryption function and a text file which is most likely the output of the python file.\nEncryption.py:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 import secrets import hashlib def encryption(text): encrypted = [] random = secrets.SystemRandom() padding_length = 256 - len(text) % 256 raw_padding = [chr(random.randint(32, 126)) for _ in range(padding_length)] scrambled_padding = [chr((ord(c) * 3 + 7) % 94 + 32) for c in raw_padding] shifted_padding = scrambled_padding[::-1] padded_text = \u0026#39;\u0026#39;.join(shifted_padding) + text final_padded_text = \u0026#39;\u0026#39;.join( chr((ord(c) ^ 42) % 94 + 32) if i % 2 == 0 else c for i, c in enumerate(padded_text) ) secret_key = str(sum(ord(c) for c in text)) secret_key = secret_key[::-1] hashed_key = hashlib.sha256(secret_key.encode()).hexdigest() seed = int(hashed_key[:16], 16) random = secrets.SystemRandom(seed) for i, char in enumerate(text): char_code = ord(char) shift = (i + 1) * 3 transformed = (char_code + shift + 67) % 256 encrypted.append(chr(transformed)) return \u0026#39;\u0026#39;.join(encrypted), seed with open(\u0026#39;VaultKey.txt\u0026#39;, \u0026#39;r\u0026#39;) as f: text = f.read() encrypted_text, seed = encryption(text) with open(\u0026#39;VaultKey_encrypted.txt\u0026#39;, \u0026#39;w\u0026#39;) as f: f.write(encrypted_text) print(\u0026#34;The file has been successfully encrypted!\u0026#34;) From the code it\u0026rsquo;s clear that the encryption function must be reversed and run on the text file to get the flag. At first I was a bit confused on how to approach this but going through the code I saw that there are a lot of red herrings. The main encryption that is happening to the original flag text is:\nConvert each character to its ASCII value. Calculate a shift value based on the character\u0026rsquo;s position. Add the shift value and 67 to the ASCII value the mod it by 256. Add this ASCII value to the final encrypted text. Using this information, the decryption function can be created:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 def decryption(encrypted_text): decrypted = [] for i, char in enumerate(encrypted_text): char_code = ord(char) shift = (i + 1) * 3 transformed = (char_code - 67 - shift) % 256 decrypted.append(chr(transformed)) return \u0026#39;\u0026#39;.join(decrypted) with open(\u0026#39;filepath_to_VaultKey_encrypted.txt\u0026#39;, \u0026#39;r\u0026#39;, encoding=\u0026#34;utf-8\u0026#34;) as f: encrypted_text = f.read() print(encrypted_text) decrypted_text = decryption(encrypted_text) print(decrypted_text) Running this python function on the provided encrypted file gives:\nFlag: ectf{1t_W45_ju5T_4_m1nu5}\nRSA Intro\rDescription: This is just a brief introduction to RSA nothing more nothing less.\nAuthor: Antoine\nThis challenge was pretty straightforward. We are given a text file that has n, e and c. So the RSA encryption can be easily reversed by putting the given values into a RSA deciphering tool:\nFlag: ectf{b4sic_F4cT0rDb_rS4}\nOIIAIOIIAI 😼\rDescription: The cat made a mess of the flag , I have to retrieve the flag or my boss will be mad.\n}eYcbt4fB{yD0nUu_05Rp_1TNh_GM13R\nAuthor: Antoine\nGiven the challenge name, the text has been encrypted by some sort of \u0026lsquo;spinning\u0026rsquo; or \u0026rsquo;turning\u0026rsquo;. After some trial and error with different combinations of decrpytion on Cyberchef, I noticed something interesting. Starting from the second character in the encrypted text, skipping every other letter gives \u0026rsquo;ectf\u0026rsquo;. The first half of the flag is every even character and the second half is every odd character. I reversed this in python:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 input = \u0026#34;}eYcbt4fB{_yD0nUu_05Rp_1TNh_GM13R_\u0026#34; result = \u0026#34;\u0026#34; for i in range(1, len(input), 2): result += input[i] for i in range(0, len(input), 2): result += input[i] print(result) reverseString = result[17:] result = result[:17] reverseString = reverseString[::-1] result += reverseString print(result) Flag: ectf{y0U_5p1N_M3_R1GhT_R0unD_B4bY}\nForensics\rJustapcap\rDescription: An image has been stolen, can you find it in the PCAP file?\nAuthor: Greg\nFor this challenge, we are given a pcap file. At first glance, opening this in Wireshark, I can see that the file is just a whole lot of DNS messages sent from the same source and sent to the same destination.\nAfter inspecting the first few lines of the pcap file, I noticed that the body of the first DNS request matched the hex file signature of a PNG file (89 50 4E 47 0D 0A 1A 0A).\nTo get the actual image, I needed to extract all the lines without the words \u0026ldquo;exfil\u0026rdquo; or \u0026ldquo;attacker\u0026rdquo; in them. After doing this, I noticed that the number \u0026ldquo;2\u0026rdquo; was at the start of every row so I used the cut command to get rid of this.\nHowever the file still wasn\u0026rsquo;t being recognised as a proper PNG file and I started feeling like I hit a wall. After much investigation, I decided to have a look at it manually in notepad and noticed that there were many junk lines that needed to be removed.\nAfter manually removing these lines, I reversed the hex dump using:\nOpening binImage.png gave:\nFlag: ectf{DN5_3xf1ltr@t10n_15_f1nd3d}\nMy Dearest\rDescription: I have Received a love letter by a fake email. Can you help me to find who is the author?\nAuthor: Greg\nThis one was pretty straightforward. We are given a word document and need to submit the author\u0026rsquo;s name as the flag. I did this through exiftool.\nFlag: ectf{MichelTeller}\nCapture the Hidden\rDescription: A cybersecurity agent intercepted suspicious network traffic before disappearing. The attackers attempted to erase their tracks, but a PCAP file was recovered.\nSomewhere within these packets, a crucial file was exfiltrated. Can you analyze the traffic, extract the hidden data, and uncover the secret message?\nAuthor: Greg\nThis challenge wasn\u0026rsquo;t too bad either. Looking at the pcap file, 3 TCP messages instantly stand out. Right before the first TCP message is sent, a FTP request is sent with the username as \u0026ldquo;hacker\u0026rdquo;.\nA couple of lines before this FTP message, a POST request is sent to the same destination. Looking at the body of this POST request, there seems to be some sort of encrypted data, my first guess being base64.\nFlag: ectf{P05t_1s_v3ry_345y_T0_F1ND}\nHardware\rORbit\rDescription: You are given a logic circuit (see orbit.png) and asked to give the binary output corresponding to the input such that (x0, x1, x2, x3, x4) = (0, 1, 0, 1, 0). Surround your answer with ectf{ } to obtain the flag.\nAs an example, entering (x0, x1, x2, x3, x4) = (1, 0, 0, 0, 0) gives (y0, y1, y2, y3, y4, y5, y6), so the flag would be ectf{1111010}.\nAuthor: Loïc\nThis challenge was really fun and different to the challenges I\u0026rsquo;ve done before. We are given a logic diagram and an input and need to find the output.\nI thought about doing this using some sort of simulator website but ended up doing the calculations by hand. I first labelled all the AND gates (can be seen in the image) to make it easier when doing the calculations.\nDoing this by hand was probably not the best way, since it\u0026rsquo;s pretty easy to mess up as I did on the left page and had to recalculate the values of y. In the end I was able to get the right values of y and as a result the right flag.\nFlag: ectf{0101011}\nIt is Trivial\rDescription: I forgot to write down the description for this challenge but it was just the previous challenge but way more complex. The input is 30478191278.\nAuthor: Loïc\nSame scenario again, but this time it\u0026rsquo;s much harder.\nThis time I decided to use logic.ly. Since it was even more easy to mess up for this challenge, I labelled all the gates according to their column. This way I would be able to cross check the gates by labelling them in logic.ly.\nLooking at the diagram, I was a bit confused on how the number that was given would become the input. On the diagram, I noticed that 6 digit binary numbers were being used to produce the output in each \u0026ldquo;block\u0026rdquo;. There would be a carry over bit for the next block, which linked the whole circuit diagram. I then converted the given number into binary but the number of digits wasn\u0026rsquo;t a multiple of 6 (it was 35). This was solved by adding an extra 0 at the start of the converted binary number: 011100011000101001000100101010101110. I could split this up into blocks of 6 bits and input them into logic.ly.\nNow came the tedious part, recreating the diagram. After a lot of time clicking away and rechecking I was able to replicate the logic circuit from the diagram.\nI used switches to set the input (off is 0 and on is 1) and lights for the output. I somehow got lucky and had the correct output on the first go!\nFlag: ectf{100010011000}\nOSINT\rProject-153-Q1\rDescription:\nThomas Yatangaki : Have you ever visited this place ? I can\u0026rsquo;t remember the name\u0026hellip; Maboi 💪 : Me neither 😕\nThis first OSINT challenge was easy. Google searching the image returned the location of the place.\nFlag: ectf{Chutes_du_Caramy}\nAuthor: Egan\nProject-153-Q2\rDescription:\nThomas Yatangaki : Did you know that the exact position where I took the photo had a name ? It is such an interesting place full of history 😮.\nAuthor: Egan\nThis challenge took some time since it wasn\u0026rsquo;t straightforward. Reverse searching the image, we get a mountain range in France known as Massif de l'Esterel. However this wasn\u0026rsquo;t the right flag.\nGoing through the search results, there are a lot of matches but none that give any hint as to what the flag could be. Maybe if I found the exact place of the photo, there might be a hint.\nI found this flicker post, which was geo-tagged. Going to this exact place in Google Maps and going into street view at this point, I can see that it is the exact place and the name of this place is Pointe de l\u0026rsquo;Observatoire. This happens to be the flag!\nFlag: ectf{Pointe_de_l'Observatoire}\nProject-153-Q4\rDescription:\nThomas Yatangaki : Bro, I think, we did the gr90 the wrong way round.\nMaboi 💪 : damn 💀 At least, the view was better at the end. Wait, do you see the place in the background in the middle ? We\u0026rsquo;ve got to get over there, what\u0026rsquo;s the name?\nThomas Yatangaki : No I don\u0026rsquo;t think we should 💀.\nAuthor: Egan\nI needed to find the name of the mounts in the background of the image. Reverse searching this image using Google Lens, I\u0026rsquo;m able to find the name of the place in a post on a hiking website.\nI then went into Google Maps and searched Chapelle Notre-Dame de Constance. Going into street view, the chapel seems like the right place since I can see two islands in the back. Zooming all the way out on Maps, I see the name of the two islands, one of them being the flag.\nFlag: ectf{Île_du_Levant}\nProject-153-Q5\rDescription:\nMaboi 💪 : Bruh, the name of the mountain where I was lmao 🧠.\nAuthor: Egan\nFor this challenge, I had to crop the image since it was too big for searching on Google. Once cropped I was able to find this AllTrails post, which gave the name of the mountain.\nFlag: ectf{Gros_Cerveau}\nProject-153-Q6\rDescription:\nThomas Yatangaki : unfortunately, it\u0026rsquo;s not part of project 153, but it\u0026rsquo;s still very beautiful here 😻.\nMaboi 💪 : How many steps were there again ?\nFlag format: ectf{number_zipcodeofthetown}\nAuthor: Egan\nThis challenge was two-fold. I had to find the number of stairs in the image and also the zip code of the place. I was able to find this page which gave the name of the place; Notre Dame de Beauvoir. Using this, I found the number of stairs on this website. Finally, I used maps to get the postcode of the place.\nFlag: ectf{262_04360}\nSteganography\rSilhouette in Cyberpunk\rDescription: I didn\u0026rsquo;t write down the description for this challenge but it was something to do with the given image.\nAuthor: Antoine\nThis challenge was different, confusing at first but very fun. I used all the common stega tools (stegsolve, binwalk, exiftool) but nothing gave any clue. I had a closer look at the image and saw that there were dots on two of the buildings. I had a hunch that it was Braille (I don\u0026rsquo;t know how I thought about this as I\u0026rsquo;ve never seen the syntax of Braille). I had guessed correctly!\nUsing a Braille convertor and the dots from the first building I was able to get the first message.\n⠹⠊⠎ ⠊⠎ ⠚⠥⠌ ⠁ ⠙⠥⠍ ⠍⠽⠂ ⠝⠊ ⠉⠑ ⠞⠗⠽ = this is just a dum my, ni ce try\nNow I knew that I was on the right track.\nI did the same with the building in the back left:\n⠓⠼⠁⠙ ⠙⠼⠉⠝ ⠼⠁⠝ ⠹⠼⠉ ⠙⠼⠙ ⠗⠅⠝⠼ ⠉⠎⠎ = h14 d3n 1n th3 d4 rkn 3ss\nFlag: ectf{h1dd3n_1n_th3_d4rkn3ss}\nWeb\rJava Weak Token\rDescription: The admin has stored a flag in the admin section, but he let you access the page since he has secured the access to it. Maybe you should show him why using a weak secret isn\u0026rsquo;t a good idea 🙂.\nAuthor: Louis\nFor this challenge, the following website is presented:\nWe are shown our JWT token and somehow need to use this information to access the admin page. Going into Burp Suite, I can see that this exact token is being sent for authorisation.\nI used this JWT cracker to find out what the secret is to maybe modify the JWT and pretend to be the admin.\nLet\u0026rsquo;s go! We got the secret. I can now modify the token using jwt.io.\nI used the default HS256 algorithm, entered the secret and changed the username to admin. Next, I clicked on the \u0026ldquo;Can I access the admin page?\u0026rdquo; button and intercepted the request and replaced my token with the modified token.\nAnd after hitting forward:\nFlag: ectf{JwT_T0keN_cR34t0r}\nThank You\rIf you’ve made it this far, I hope you’ve enjoyed this writeup and thank you for reading it! Thanks again to the Cyber \u0026amp; Chill team for organising this CTF.\n","date":"2025-02-04T10:00:00+11:00","image":"http://localhost:1313/p/ectf-2025/cover_hu11981104924221128776.png","permalink":"http://localhost:1313/p/ectf-2025/","title":"ECTF 2025 Writeup"},{"content":"I recently solo participated in the 24-hour KnightCTF. I placed 197th out of the 759 teams. Huge thanks to the Knight Squad for hosting this really fun CTF.\nReverse Engineering\rBinary Quest\rDescription: In the far-off kingdom of Valoria, an ancient relic called the “Sacred Flag” lies hidden within a guarded fortress. Legend says only a true knight of cunning and skill can lay claim to its power. Dare you venture into the shadows and emerge victorious? Your journey begins now—onward, brave soul, and seize your destiny in the Binary Quest.\nAuthor: NomanProdhan\nFor this challenge, we are given a binary file called binary.quest. Before trying open it in Ghidra, I decided to run the strings command on the file to see if anything interesting comes up. The following came up:\nThis file has been packed with UPX V4.24. After a bit of research, I found out that there is a UPX tool available to unpack the file, which I installed using the command sudo apt install upx. I then unpacked the file using upx -d binary.quest. I was now able to open the file using Ghidra to understand how the file works.\nMost of the functions weren\u0026rsquo;t interesting but FUN_00101Oa0 seemed to be the way to go. The logic that checks if the users\u0026rsquo; input matches the flag is:\n1 2 3 4 5 6 7 8 9 10 11 12 13 printf(\u0026#34;Enter the sacred flag to complete your quest: \u0026#34;); __isoc99_scanf(\u0026amp;DAT_00102356,local_58); sVar2 = strlen(local_58); FUN_00101330(local_58,sVar2 \u0026amp; 0xffffffff); iVar1 = strcmp(local_58,local_98); if (iVar1 == 0) { puts(\u0026#34;\\nYou have proven your valor, oh noble knight!\u0026#34;); puts(\u0026#34;The kingdom rejoices at your triumph, and the hidden flag is indeed yours.\\n\u0026#34;); } else { puts(\u0026#34;\\nAlas, you have failed this time. The quest remains unfulfilled...\u0026#34;); puts(\u0026#34;Return stronger and try again, brave knight.\\n\u0026#34;); } The program checks if the users\u0026rsquo; input (local__58) is equal to the variable local_98, which contains the flag. Looking at lines 42-45 we can see what the value of local_98 is, alongside two other variables:\n1 2 3 4 local_88._0_4_ = 0x7d5f3f59; local_98._8_4_ = 0x37695f73; local_98._0_8_ = 0x34575f7b4654434b; uStack_8c = 0x7334655f Decoding these hex values using CyberChef we get the following:\nlocal_88._0_4_ = }_?Y local_98._8_4_ = 7i_s local_98._0_8_ = 4W_{FTCK uStack_8c = s4e_ FTCK is KCTF backwards which is the format of the flags, so these values need to reversed and concatenated to get the flag.\nFlag: KCTF{_W4s_i7_e4sY?_}\nEasy Path to the Grail\rDescription: Brave knight, your quest is simple yet essential—unlock the secrets hidden in this binary challenge and tread the path to the grail. The journey will test your wits as you reverse the provided binary, uncovering the treasure within.\nAuthor: NomanProdhan\nFor this challenge, we are given a binary file called grail.knight. Running strings on the file doesn\u0026rsquo;t return anything interesting so I opened it in Ghidra. This time there are a few interesting functions main, transforming_input and do_fight.\nInside the main function, the program takes in the users\u0026rsquo; input (local_198), runs the transform_input function with the parameters as local_198 and local_118 which is an empty variable. It then checks if local_118 is equal to some string value. If it is, then the users\u0026rsquo; input is the correct flag.\n1 2 3 4 5 6 7 8 9 10 11 12 13 printf(\u0026#34;Enter the password (the original flag): \u0026#34;); iVar1 = __isoc99_scanf(\u0026#34;%127s\u0026#34;,local_198); if (iVar1 == 1) { transform_input(local_198,local_118); iVar1 = strcmp(local_118,\u0026#34;D2C22A62DEA62CCE9EFA0ECC86CE9AFA4ECC6EFAC6162C3636CC76E6A6BE\u0026#34;); if (iVar1 == 0) { printf(\u0026#34;Correct! The flag is %s\\n\u0026#34;,local_198); } else { puts(\u0026#34;Wrong password!\u0026#34;); } uVar2 = 0; } Looking at transform_input, we can see:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 void transform_input(char *param_1,char *param_2) { byte bVar1; char *local_28; char *local_20; local_28 = param_2; for (local_20 = param_1; *local_20 != \u0026#39;\\0\u0026#39;; local_20 = local_20 + 1) { bVar1 = do_fight(*local_20); sprintf(local_28,\u0026#34;%02X\u0026#34;,(ulong)bVar1); local_28 = local_28 + 2; } *local_28 = \u0026#39;\\0\u0026#39;; return; } This function calls the do_fight function, likely doing some sort of byte conversion, on each character of the input string param_1, which is the users\u0026rsquo; input. Each byte is then converted as a two digit hexadecimal string and stored in param_2 which points to local_118 from the function call in main. In do_fight, the following can be seen:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 byte do_fight(byte param_1) { byte local_1c; byte local_d; int local_c; local_d = 0; local_1c = param_1; for (local_c = 0; local_c \u0026lt; 8; local_c = local_c + 1) { local_d = local_d \u0026lt;\u0026lt; 1 | local_1c \u0026amp; 1; local_1c = local_1c \u0026gt;\u0026gt; 1; } return local_d; } Given a byte, do_fight will return the reverse. So given the string value that local_118 is compared with, we need to convert it into binary, reverse the binary and covert it to text, which will give us the flag. Doing this in CyberChef gives the following:\nFlag: KCTF{e4sy_p3asY_r3v_ch4ll3nge}\nKnight\u0026rsquo;s Droid\rDescription: For ages, a cryptic mechanical guardian has slumbered beneath the Knight’s Citadel. Some say it holds powerful secrets once wielded by ancient code-wielding Knights. Many have tried to reactivate the droid and claim its hidden knowledge—yet none have returned victorious. Will you be the one to solve its riddles and awaken this legendary machine?\nAuthor: NomanProdhan\nFor this challenge, we are given an APK file called knights_droid. I open it using jadx knights_droid.apk. Inside the source code the following main function can be seen:\nThe program checks to see if the user has the right flag by calling the function verifyFlag function from the SecretKeyVerifier class.\nLooking at the SecretKeyVerifier class, it can be seen that the verifyFlag function encodes the users\u0026rsquo; input and then compares it with GYPB{_ykjcnwp5_GJECDP_u0q_c0p_uKqN_Gj1cd7_zN01z_}, which is most likely the flag. I guessed that it was probably some type of substitution cipher so I brute forced (ROT13) the string using CyberChef and got the following:\nFlag: KCTF{_congrat5_KNIGHT_y0u_g0t_yOuR_Kn1gh7_dR01d_}\nWeb\rKnightCal\rDescription: In the realm of ancient codes, only those who enumerate correctly can unveil the hidden flag. Craft your mathematical expressions wisely and uncover the secrets that lie within.\nAuthor: NomanProdhan\nGoing to the given website the following calculator page is shown: After entering 1234, this output was given: It was clear that the numbers corresponded to letters in some way, so I decided to try all the digits: Given this output, I wanted to try and create the word flag as the website would then return flag.txt. Given the output from above I used 7195 as the input since:\n7 = f 1 = l 9 = a 5 = g Flag: KCTF{_c0ngR4t5_KNIGHT_f1naLLy_Y0U_g07_tH3_r1gh7_m4tH_}\nCryptography\rReflections in the Random\rDescription: We’ve uncovered a single string that’s saturated with possibilities. At first glance, it might resemble standard Base64 output—but every attempt to decode it directly results in chaotic gibberish.\nSome agents suspect an unconventional passphrase or a stray cosmic phenomenon that shifted the bits; others whisper about symmetrical illusions that hide the real message. We even tried old-fashioned classical ciphers—simple shifts, sub-harmonic permutations, you name it—but the truth remains elusive.\nAll we know is that the message is said to be “spun backward from a single pivot,” though no one agrees what that means. Could it mean time is reversed? Maybe it’s an obscure numeric transformation. Rumor has it that if you find “the key,” everything falls into place. Or maybe it’s simpler than we think—just cleverly disguised.\nGood luck dissecting this anomaly. Remember: “When the obvious leads nowhere, perhaps the solution sits right in front of you—only viewed from the wrong angle.\nAuthor: pmsiam0\nWe are given Cipher.txt which contains the following text:\nchipher: PzExcRcFHQsdOxF2cR0WEXIPOQQWAQk=\nkey = 0x42\nGiven the challenge description, I know that during the decryption process, there must be some sort of reversal. I head to CyberChef and start trying different combinations. Since we are just given a key, I think that we need to use XOR somewhere. The key 0x42 is the letter B. Using this information, I decode it from Base64, reverse the output then XOR using the letter B. This recipe gives the following:\nFlag: KCTF{M0ST_34Sy_I_GU3ss}\nForward, Yet It Falls Back\rDescription: We discovered a peculiar string that appears standard but yields gibberish under normal decoding. Some analysts detect suspicious symmetry, hinting at reflection or an inverted dimension. Others suspect hidden block boundaries or a “backwards encoding,” while a few insist it\u0026rsquo;s “rotated on a different axis.”\nOur only clue: “Symbols may shift forward, but the key is often in reversing what we think is correct.”\nGood luck peeling back the layers—sometimes you must step backward to see what’s right before you.\nAuthor: pmsiam0\nIn this challenge, we are given a text file that contains the following:\nbase32: G7G2DGQ5SY4DCK5YVUDRROJI3UOAUUNTVR6XKDOKQO4CAAKK2MJA====\nkey = 0123456789ABCDEF\niv = FEDCBA9876543210\nAgain, I head to CyberChef and start experimenting. I know that the first step is to decode the string use Base32. From here, I know that I probably won\u0026rsquo;t be able to decode it using any simple cipher, given the challenge description. Given the hint \u0026ldquo;Symbols may shift forward\u0026rdquo; and the fact that we are given a key and iv, I\u0026rsquo;m thinking it is some mode of AES.\nAfter converting the decoded Base32 string to hex and decrypting the string in CBC using the given key and iv the following is given:\nFlag: KCTF{R3vers3_R3vers3_D3C0DE}\nNetworks\rServer \u0026amp; Attacker IP\rDescription: In this challenge, I\u0026rsquo;ve crafted a series of intricate scenarios that will test your investigative skills. You\u0026rsquo;ll dive into a network of secrets, uncover hidden identities, and piece together the story of a complex cyber attack. Each step requires careful analysis and keen observation. There are total 17 challenges \u0026amp; 3 pcap files in this category. The files will be provided accordingly. The answers are there, but they won\u0026rsquo;t come easily—you\u0026rsquo;ll need to think like an attacker and act like a detective. Get ready to unravel the mystery and prove your prowess in this thrilling journey.\nWhat are the server \u0026amp; attacker IPs?\nAuthor: TareqAhamed (0xt4req)\nFor this challenge and all following network challenges, we\u0026rsquo;re given a capture1.pcapng file. In this first challenge, we have to find the server and attacker IPs. Quickly scrolling over the file, I can see that there are a lot of [SYN] TCP packets being sent from 192.168.1.9 to 192.167.1.10. 192.167.1.10 is then replying with [RST, ACK].\nSince this exchange goes on for quite I while, I\u0026rsquo;m thinking that the attacker is 192.168.1.9 and they are running some sort of port scan on the server at 192.167.1.10.\nFlag: 192.168.1.10_192.168.1.9\nThe Intruder\u0026rsquo;s Identity\rDescription: The attacker has gained access. Can you find out the username and password he used?\nAuthor: TareqAhamed (0xt4req)\nLooking at the packets, it\u0026rsquo;s clear that 192.167.1.10 is a web server. I filter the packets using ip.src == 192.168.1.9 \u0026amp;\u0026amp; http.request.method == POST \u0026amp;\u0026amp; ip.dst == 192.168.1.10 and the first packet that comes up is to /register. Looking at this packet the following details are found:\n1 2 3 4 5 6 7 HTML Form URL Encoded: application/x-www-form-urlencoded Form item: \u0026#34;_token\u0026#34; = \u0026#34;pLDuHThQ1RGo8gXsm7ZHtxYLr66KDMWMXJEt8GEa\u0026#34; Form item: \u0026#34;name\u0026#34; = \u0026#34;TheExploiter\u0026#34; Form item: \u0026#34;username\u0026#34; = \u0026#34;theexploiter\u0026#34; Form item: \u0026#34;email\u0026#34; = \u0026#34;theexploiter@knightblog.com\u0026#34; Form item: \u0026#34;password\u0026#34; = \u0026#34;exploiter@test\u0026#34; Form item: \u0026#34;password_confirmation\u0026#34; = \u0026#34;exploiter@test\u0026#34; Flag: KCTF{theexploiter_exploiter@test}\nThe Real Admin\rDescription: Can you identify the real admin\u0026rsquo;s ip?\nAuthor: TareqAhamed (0xt4req)\nFiltering the packets using http.request.method == POST \u0026amp;\u0026amp; ip.addr == 192.168.1.10 doesn\u0026rsquo;t help because the attacker has used some sort of web enumeration tool to try and brute force the admins\u0026rsquo; password.\nSo the attackers\u0026rsquo; IP address needs to be filtered out.\nhttp.request.method == POST \u0026amp;\u0026amp; ip.addr == 192.168.1.10 \u0026amp;\u0026amp; !ip.addr == 192.168.1.9 shows one packet with the details:\n171000\t623.001452577\t192.168.1.3\t192.168.1.10\tHTTP\t128\tPOST /admin/blog/delete/3 HTTP/1.1 (application/x-www-form-urlencoded)\nFlag: KCTF{192.168.1.3}\nCompromising the Admin\rDescription: The attacker managed to compromise the admin\u0026rsquo;s credentials. Identify the admin\u0026rsquo;s email and password.\nAuthor: TareqAhamed (0xt4req)\nSince we know that the attacker is trying to brute force the /admin/login page with POST requests, I decide to filter the packets using this information:\nhttp.request.method == POST \u0026amp;\u0026amp; ip.addr == 192.168.1.10 \u0026amp;\u0026amp; ip.addr == 192.168.1.9 \u0026amp;\u0026amp; http.request.uri == \u0026quot;/admin/login\u0026quot;\nI decide to use the information from the last packet since this would mean that either the attacker\u0026rsquo;s brute force ended unsuccessfully or they were able to get the right credentials.\n1 2 3 4 HTML Form URL Encoded: application/x-www-form-urlencoded Form item: \u0026#34;_token\u0026#34; = \u0026#34;lj41L7Wk6N6hZd7K5twHMghHSkruvwzX3JcV5GLj\u0026#34; Form item: \u0026#34;email\u0026#34; = \u0026#34;admin@example.com\u0026#34; Form item: \u0026#34;password\u0026#34; = \u0026#34;password\u0026#34; Flag: KCTF{admin@example.com_password}\nPWN\rKnight\u0026rsquo;s Bank\rDescription: In the heart of the ancient kingdom lies the Knight Bank, a fortress of wealth guarded by its intricate magical arithmetic. Only the most cunning warriors who understand the secret vulnerabilities of numbers can uncover the hidden treasure buried deep within its vaults.\nAuthor: NomanProdhan\nFor this challenge, we are given given an IP address and port to establish a netcat connection with (which I forgot to note down). We are also given a knight_bank file, which is being run when we establish the netcat connection. Running the file gives:\nOpening the file in Ghidra, there are two interesting functions main and win_prize. main has the following logic:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 undefined8 main(void) { int iVar1; undefined8 uVar2; uint local_10; uint local_c; local_c = 1000; puts(\u0026#34;Welcome to the Knight Bank!\u0026#34;); fflush(stdout); printf(\u0026#34;Your current balance is: %u\\n\u0026#34;,(ulong)local_c); fflush(stdout); printf(\u0026#34;Enter the amount you want to withdraw: \u0026#34;); fflush(stdout); iVar1 = __isoc99_scanf(\u0026amp;DAT_004020a0,\u0026amp;local_10); if (iVar1 == 1) { if (local_10 \u0026lt; 0xf4241) { local_c = local_c - local_10; printf(\u0026#34;You withdrew %u. Your new balance is %u.\\n\u0026#34;,(ulong)local_10,(ulong)local_c); fflush(stdout); if (local_c \u0026lt; 0xf4241) { puts(\u0026#34;Better luck next time!\u0026#34;); fflush(stdout); } else { win_prize(); } uVar2 = 0; } else { puts(\u0026#34;Error: You cannot withdraw more than 1,000,000 at a time.\u0026#34;); fflush(stdout); uVar2 = 1; } } else { puts(\u0026#34;Invalid input. Exiting.\u0026#34;); fflush(stdout); uVar2 = 1; } return uVar2; } win_prize function:\n1 2 3 4 5 6 7 void win_prize(void) { puts(\u0026#34;Congratulations! You win the prize!\u0026#34;); fflush(stdout); system(\u0026#34;cat flag.txt\u0026#34;); return; } Given this information, we need to trigger the else statement that calls win_prize. After subtracting the users\u0026rsquo; input (which has to be less than 1,000,000 given the hex value 0xf4241) from the balance, the program checks if the result is less than 1,000,000. If it isn\u0026rsquo;t then we get the flag.\nI decided in input 10,000 since it was larger than 1000 and less than 1,000,000. Since local_c is a 32-bit unsigned integer, this would cause the subtraction to wrap around when it goes below 0. This gave the flag, however I forgot to note the flag down, so here is the output on my local machine:\n1 2 3 4 5 6 Welcome to the Knight Bank! Your current balance is: 1000 Enter the amount you want to withdraw: 10000 You withdrew 10000. Your new balance is 4294958296. Congratulations! You win the prize! cat: flag.txt: No such file or directory Knight\u0026rsquo;s Secret\rDescription: Exploit \u0026amp; get the flag.\nConnection Info: nc 45.56.68.122 1337\nAuthor: NomanProdhan\nWe aren\u0026rsquo;t given any files for this challenge. Connecting to the server we can see this:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 └─$ nc 45.56.68.122 1337 ================================================== Welcome to the Knight\u0026#39;s Secret! The castle\u0026#39;s vault holds a secret key, protected within the CONFIG dictionary. You are a knight tasked with proving the strength of the vault\u0026#39;s defenses. To succeed, you must craft an input to reveal the hidden key within the system. You will be provided with a user object representing a knight, with attributes \u0026#39;name\u0026#39; and \u0026#39;role\u0026#39;. Once you discover the key, input it again to receive the banner of victory. Example of a safe template: \u0026#39;Greetings, {person_obj.name}, the {person_obj.role}.\u0026#39; Type \u0026#39;hint\u0026#39; if you need guidance or \u0026#39;exit\u0026#39; to withdraw from the quest. ================================================== Enter your secret: Entering the safe template given shows:\n1 2 Enter your secret: Greetings, {person_obj.name}, the {person_obj.role} Output: Greetings, Brave Knight, the Defender of the Realm After much trail and error I was able to figure out that the program running on the server would only taken in objects as input. So using this, we need to get the CONFIG library. Using {person_obj.__class__.__init__.__globals__} we can see the following:\n1 2 Enter your secret: {person_obj.__class__.__init__.__globals__} Output: {\u0026#39;__name__\u0026#39;: \u0026#39;__main__\u0026#39;, \u0026#39;__doc__\u0026#39;: None, \u0026#39;__package__\u0026#39;: None, \u0026#39;__loader__\u0026#39;: \u0026lt;_frozen_importlib_external.SourceFileLoader object at 0x72e3aa43b920\u0026gt;, \u0026#39;__spec__\u0026#39;: None, \u0026#39;__annotations__\u0026#39;: {}, \u0026#39;__builtins__\u0026#39;: \u0026lt;module \u0026#39;builtins\u0026#39; (built-in)\u0026gt;, \u0026#39;__file__\u0026#39;: \u0026#39;/challenge/challenge.py\u0026#39;, \u0026#39;__cached__\u0026#39;: None, \u0026#39;CONFIG\u0026#39;: {\u0026#39;KEY\u0026#39;: \u0026#39;_KNIGHTSECRET2025_\u0026#39;}, \u0026#39;Person\u0026#39;: \u0026lt;class \u0026#39;__main__.Person\u0026#39;\u0026gt;, \u0026#39;fun\u0026#39;: \u0026lt;function fun at 0x72e3aa422340\u0026gt;, \u0026#39;main\u0026#39;: \u0026lt;function main at 0x72e3aa200d60\u0026gt;} The key _KNIGHTSECRET2025_ has the flag. Entering {person_obj.__class__.__init__.__globals__[CONFIG][KEY]} gives:\n1 2 3 4 5 6 Enter your secret: {person_obj.__class__.__init__.__globals__[CONFIG]} Output: {\u0026#39;KEY\u0026#39;: \u0026#39;_KNIGHTSECRET2025_\u0026#39;} Enter your secret: {person_obj.__class__.__init__.__globals__[CONFIG][KEY]} Congratulations, noble knight! You have unveiled the vault\u0026#39;s secret. Here is your banner of victory: KCTF{_c0ngRaT5_Kn1GHT_Y0U_g07_THE_secreT_} Flag: KCTF{_c0ngRaT5_Kn1GHT_Y0U_g07_THE_secreT_}\nOSINT\rThe Hidden Quest\rDescription: The journey begins even before the battle starts! 🕵️‍♂️\nIn the world of knights and hackers, not everything is as it seems. Somewhere in our recent posts, a secret lies hidden, waiting to be discovered. 🕵️‍♂️\nLook closer, think sharper, and let your curiosity guide you. The answer is out there – will you find it? 🛡️\nAuthor: NomanProdhan\nGiven the challenge description, I decide to find all the different social media accounts of Knight Squad. Going to their website, we can see at the bottom of their page that they have a Facebook, Twitter and Youtube account. I decide to start with their Facebook account. They have made several posts this year so I decide to go through them all. On one of the posts I see that one of the hashtags is #Flag. I double check this by looking at the tags for the other posts and this post is the only one that has it. After looking at the image, I saw the flag in the top left. The post is here.\nFlag: KCTF{w0W_y0U_G07_m3_}\nThank You\rIf you\u0026rsquo;ve made it this far, I hope you\u0026rsquo;ve enjoyed this writeup and thank you for reading it! Thanks again to the Knight Squad for organising this CTF.\n","date":"2025-01-22T14:00:00+11:00","image":"http://localhost:1313/p/knightctf-2025/cover_hu7351940104379622244.png","permalink":"http://localhost:1313/p/knightctf-2025/","title":"KnightCTF 2025 Writeup"}]